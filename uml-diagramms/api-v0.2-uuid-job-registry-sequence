@startuml
title IRS API sequence diagramm v0.2

actor CE as "CE Dashboard"

box Item Relationship Service
participant IRS_API as " API v0.2"
participant Controller as "IrsController"
participant Crawler as "IrsAASCrawler"
database Blobstore as "IRSBlobstore"
participant JobRegistry
end box

' box Catena-X Network
' participant AAS_R as "AAS Registry"
' end box

autonumber "<b> [00]"

CE -> IRS_API: GET /irs/items/{globalAssetId}
activate IRS_API
IRS_API -> Controller: GET /registry/register job for {globalAssetId}
Controller -> JobRegistry: registerJob(globalAssetId)
Controller <-- JobRegistry:  return jobId {UUID}
ref over Controller, Crawler
   initiate crawler for AAS
   for job {jobId} with {globalAssetId}
end ref
IRS_API <-- Controller: return jobId {UUID}
CE <-- IRS_API: 200 with Payload JobId as UUID
note over CE
    Job running
end note

CE -> IRS_API:  /irs/jobs/{jobId} // (jobId as UUID)
IRS_API -> Controller: GET /registry/lookup  {jobId}
Controller -> JobRegistry: lookup(jobId)
note over JobRegistry
    Job is running
end note

Controller <-- JobRegistry: job definition for {jobId as UUID} // (jobId)
Controller -->  Blobstore : Fetch job document for {jobId}
Controller <--  Blobstore : job document for {jobId}
IRS_API <-- Controller:  job definition for {jobId as UUID} // (jobId)
CE <-- IRS_API: 206 job definition with optional PartTree as payload
note over IRS_API
    return parttree in payload if (returnUncompletedResultTree) is true
end note



note over CE
    Job complete
end note

CE -> IRS_API:  /irs/jobs/{jobId as UUID} // (jobId)
IRS_API -> Controller : GET /registry/lookup  {jobId}
Controller -> JobRegistry: GET /registry/lookup  {jobId}
note over JobRegistry
    Job has completed
end note

Controller <-- JobRegistry: job definition for {jobId as UUID} // (jobId)
Controller -->  Blobstore : Fetch job document for {jobId}
Controller <--  Blobstore : job document for {jobId}
IRS_API <-- Controller:  job definition for {jobId as UUID} // (jobId)
CE <-- IRS_API: 200 with job definition and PartTree as payload
note over IRS_API
    return parttree in payload if (returnUncompletedResultTree) is true
end note

note over CE
    Job failed
end note

CE -> IRS_API:  /irs/jobs/{jobId as UUID} // (jobId)
IRS_API -> Controller : GET /registry/lookup  {jobId}
Controller -> JobRegistry: GET /registry/lookup  {jobId}
note over JobRegistry
    Job failed
end note

Controller <-- JobRegistry: job definition for {jobId as UUID} // (jobId)
Controller -->  Blobstore : Fetch job document for {jobId}
Controller <--  Blobstore : job document for {jobId}
IRS_API <-- Controller:  job definition for {jobId as UUID} // (jobId)
CE <-- IRS_API: 417 job definition with exceptional state
note over IRS_API
    return parttree in payload if (returnUncompletedResultTree) is true
end note


note over CE
    Job was canceled
end note

CE -> IRS_API:  /irs/jobs/{jobId as UUID} // (jobId)
IRS_API -> Controller : GET /registry/lookup  {jobId}
Controller -> JobRegistry: GET /registry/lookup  {jobId}
note over JobRegistry
    Job canceled
end note
Controller <-- JobRegistry: job definition for {jobId as UUID} // (jobId)
IRS_API <-- Controller : job definition with state information
CE <-- IRS_API: 417 job definition with state information

deactivate IRS_API

@enduml