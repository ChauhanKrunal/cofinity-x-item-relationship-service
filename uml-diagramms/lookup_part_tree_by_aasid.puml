@startuml
'https://plantuml.com/sequence-diagram


autonumber "<b>[000]"

TraceabilityApp -> IrsAPI: /api/vX.X/parts/{aasID}/tree?depth?bom?aspect
IrsAPI -> IrsController: buildTree
IrsController -> JobRegistry: lookupJobDefinition
IrsController <-- JobRegistry: job or NullObject
alt Job in registry
    database Blobstore
    IrsController -> Blobstore: fetchJob
    IrsController <-- Blobstore: job document
    IrsAPI <-- IrsController: job document (complete)
    TraceabilityAPP <-- IrsAPI: job document (complete)
else Job not in registry
    IrsController -> JobFactory: createJobFor(path)
     note right
            as the aasID and although the query parameters identifies
            the result of the job the have to be stored to identify the job
     end note
    IrsController <-- JobFactory: jobDefinition
    note left
         error handling
        end note
    IrsController -> JobRegistry: registerJob
    IrsController <--JobRegistry: success

    note left
     error handling
    end note
     TraceabilityAPP <-- IrsController: job document (incomplete)
    note right
         job document header contains current state and processing
         information for job definition
         parttree is not included
    end note
end
IrsController -> IrsAASCrawler: initialeCrawlerJob(job)
    note left
         job should be manged
         to be interrupted / stopped and resumed.
   end note

participant IrsAasClient
participant  AASAdapter
ref over IrsAASCrawler, IrsAasClient, AASAdapter : build part tree document for job definition
   IrsAASCrawler -> IrsAASCrawler : aggregate document
group end
   IrsController <-- IrsAASCrawler : success
   TraceabilityApp -> IrsController: /api/vX.X/parts/{aasID}/tree
   IrsController -> JobRegistry: lookupJobDefinition
   IrsController <-- JobRegistry: Job
   IrsController -> Blobstore: fetchJob
   IrsController <-- Blobstore: job document
   TraceabilityApp <-- IrsController: job document (complete)
@enduml