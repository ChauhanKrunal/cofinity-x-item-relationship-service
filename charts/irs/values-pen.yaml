springprofile: pen

image:
  tag: main

ingress:
  hosts:
    - host: "irs-pen.int.demo.catena-x.net"
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls:
    - hosts:
        - "irs-pen.int.demo.catena-x.net"
      # Default secret for certificate creation already provided to your namespace
      secretName: tls-secret

keycloak:
  oauth2:
    clientId: <path:traceability-irs/data/int/keycloak/oauth2#clientId>
    clientSecret: <path:traceability-irs/data/int/keycloak/oauth2#clientSecret>
    clientTokenUri: <path:traceability-irs/data/int/keycloak/oauth2#tokenUri>
    jwkSetUri: <path:traceability-irs/data/int/keycloak/oauth2#jwkSetUri>

aasProxy:
  submodel:
    username: <path:traceability-irs/data/int/aasProxy/submodel#username>
    password: <path:traceability-irs/data/int/aasProxy/submodel#password>

minio:
  url: http://app-minio-pen:9000

aasWrapper:
  host: http://aaswrapper-pen:9191/api/service

digitalTwinRegistry:
  url: https://semantics.int.demo.catena-x.net/registry

rootUser: <path:traceability-irs/data/int/minio#minioUser>
rootPassword: <path:traceability-irs/data/int/minio#minioPassword>

# Values for aas wrapper subchart.
irs-aaswrapper:
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/ssl-passthrough: "false"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    hosts:
      - host: "irs-aas-wrapper-pen.int.demo.catena-x.net"
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: aaswrapper-pen
                port:
                  number: 9191
    tls:
      - hosts:
          - "irs-aas-wrapper-pen.int.demo.catena-x.net"
        # Default secret for certificate creation already provided to your namespace
        secretName: tls-secret

  configuration:
    properties: |-
      web.http.port=9191
      web.http.path=/api
      web.http.callback.port=9192
      web.http.callback.path=/callback
      wrapper.consumer.edc.datamanagement.url=http://edc-consumer-controlplane-pen:8181/data
      wrapper.consumer.edc.control.url=http://edc-consumer-controlplane-pen:9999/api/controlplane/control
      wrapper.consumer.edc.apikey.name=X-Api-Key
      wrapper.consumer.edc.apikey.value=123456
      wrapper.callback.timeout=60
      # wrapper.auth.basic.someuser=somepassword


# Values for minio subchart.
irs-minio:
  ## Path where PV would be mounted on the MinIO Pod
  mountPath: "/export"

  ## Set default rootUser, rootPassword
  ## AccessKey and secretKey is generated when not set
  ## Distributed MinIO ref: https://docs.minio.io/docs/distributed-minio-quickstart-guide
  ##
  rootUser: <path:traceability-irs/data/int/minio#minioUser>
  rootPassword: <path:traceability-irs/data/int/minio#minioPassword>


  ## Enable persistence using Persistent Volume Claims
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    enabled: true
    accessMode: ReadWriteOnce
    size: 500Mi


# Values for prometheus subchart.
irs-prometheus:

# Values for grafana subchart.
irs-grafana:

# Values for edc-controlplane subchart.
edc-controlplane:
  # -- Overrides the charts name
  nameOverride: "edc-consumer-controlplane-pen"
  # -- Overrides the releases full name
  fullnameOverride: "edc-consumer-controlplane-pen"

  image:
    tag: "0.1.0"

  ## Ingress declaration to expose the network service.
  ingresses:
    ## Public / Internet facing Ingress
    - enabled: true
      # -- The hostname to be used to precisely map incoming traffic onto the underlying network service
      hostname: "irs-consumer-controlplane-pen.int.demo.catena-x.net"
      # -- Additional ingress annotations to add
      annotations: { }
      # -- EDC endpoints exposed by this ingress resource
      endpoints:
        - ids
      # -- Defines the [ingress class](https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class)  to use
      className: ""
      # -- Enables TLS on the ingress resource
      tls:
        - hosts:
            - "irs-consumer-controlplane-pen.int.demo.catena-x.net"
          # Default secret for certificate creation already provided to your namespace
          secretName: tls-secret
      ## Adds [cert-manager](https://cert-manager.io/docs/) annotations to the ingress resource
      certManager:
        # -- If preset enables certificate generation via cert-manager namespace scoped issuer
        issuer: ""
        # -- If preset enables certificate generation via cert-manager cluster-wide issuer
        clusterIssuer: ""

  configuration:
    # -- EDC configuration.properties configuring aspects of the [eclipse-dataspaceconnector](https://github.com/eclipse-dataspaceconnector/DataSpaceConnector)
    properties: |-
      edc.api.auth.key=123456

      ids.webhook.address=https://irs-consumer-controlplane-pen.int.demo.catena-x.net

      edc.ids.id=urn:connector:edc-consumer-controlplane-pen
      edc.ids.catalog.id=urn:catalog:default
      edc.ids.endpoint=https://irs-consumer-controlplane-pen.int.demo.catena-x.net/api/v1/ids

      edc.receiver.http.endpoint=http://aaswrapper-pen:9192/callback/endpoint-data-reference

      edc.transfer.proxy.endpoint=https://irs-consumer-dataplane-pen.int.demo.catena-x.net/api/public
      edc.transfer.proxy.token.signer.privatekey.alias=azure-vault-token-signer-private-key
      edc.transfer.proxy.token.verifier.publickey.alias=azure-vault-token-signer-private-key-pub

      edc.dataplane.selector.consumerpen.url=http://edc-consumer-dataplane-pen:9999/api/dataplane/control
      edc.dataplane.selector.consumerpen.sourcetypes=HttpData
      edc.dataplane.selector.consumerpen.destinationtypes=HttpProxy
      edc.dataplane.selector.consumerpen.properties={ "publicApiUrl": "https://irs-consumer-dataplane-pen.int.demo.catena-x.net/api/public" }

      edc.oauth.client.id=D9:3A:80:9E:9C:21:95:12:5C:C2:1D:D8:30:80:7A:B9:DD:5F:C9:09:keyid:D9:3A:80:9E:9C:21:95:12:5C:C2:1D:D8:30:80:7A:B9:DD:5F:C9:09
      edc.oauth.private.key.alias=irs-int-daps-key
      edc.oauth.provider.audience=idsc:IDS_CONNECTORS_ALL
      edc.oauth.provider.jwks.url=https://daps1.int.demo.catena-x.net/.well-known/jwks.json
      edc.oauth.public.key.alias=irs-int-daps-cert
      edc.oauth.token.url=https://daps1.int.demo.catena-x.net/token

      edc.vault.hashicorp.url=https://vault.demo.catena-x.net
      edc.vault.hashicorp.token=<path:traceability-irs/data/int/controlplane#vaultToken>
      edc.vault.hashicorp.timeout.seconds=30
      edc.vault.hashicorp.health.check.enabled=true
      edc.vault.hashicorp.health.check.standby.ok=true
      edc.vault.hashicorp.api.secret.path=/v1/traceability-irs

      edc.data.encryption.keys.alias=irs-int-daps-key
      edc.data.encryption.algorithm=NONE

      # Postgresql related configuration
      edc.datasource.asset.name=asset
      edc.datasource.asset.url=jdbc:postgresql://irs-edc-postgres-pen-postgresql-hl:5432/edc
      edc.datasource.asset.user=<path:traceability-irs/data/int/controlplane#databaseuser>
      edc.datasource.asset.password=<path:traceability-irs/data/int/controlplane#databasepassword>
      edc.datasource.contractdefinition.name=contractdefinition
      edc.datasource.contractdefinition.url=jdbc:postgresql://irs-edc-postgres-pen-postgresql-hl:5432/edc
      edc.datasource.contractdefinition.user=<path:traceability-irs/data/int/controlplane#databaseuser>
      edc.datasource.contractdefinition.password=<path:traceability-irs/data/int/controlplane#databasepassword>
      edc.datasource.contractnegotiation.name=contractnegotiation
      edc.datasource.contractnegotiation.url=jdbc:postgresql://irs-edc-postgres-pen-postgresql-hl:5432/edc
      edc.datasource.contractnegotiation.user=<path:traceability-irs/data/int/controlplane#databaseuser>
      edc.datasource.contractnegotiation.password=<path:traceability-irs/data/int/controlplane#databasepassword>
      edc.datasource.policy.name=policy
      edc.datasource.policy.url=jdbc:postgresql://irs-edc-postgres-pen-postgresql-hl:5432/edc
      edc.datasource.policy.user=<path:traceability-irs/data/int/controlplane#databaseuser>
      edc.datasource.policy.password=<path:traceability-irs/data/int/controlplane#databasepassword>
      edc.datasource.transferprocess.name=transferprocess
      edc.datasource.transferprocess.url=jdbc:postgresql://irs-edc-postgres-pen-postgresql-hl:5432/edc
      edc.datasource.transferprocess.user=<path:traceability-irs/data/int/controlplane#databaseuser>
      edc.datasource.transferprocess.password=<path:traceability-irs/data/int/controlplane#databasepassword>

# Values for edc-dataplane subchart.
edc-dataplane:
  image:
    tag: "0.1.0"

  # -- Overrides the charts name
  nameOverride: "edc-consumer-dataplane-pen"
  # -- Overrides the releases full name
  fullnameOverride: "edc-consumer-dataplane-pen"

  ## Ingress declaration to expose the network service.
  ingresses:
    ## Public / Internet facing Ingress
    - enabled: true
      # -- The hostname to be used to precisely map incoming traffic onto the underlying network service
      hostname: "irs-consumer-dataplane-pen.int.demo.catena-x.net"
      # -- Additional ingress annotations to add
      annotations:
        nginx.ingress.kubernetes.io/ssl-passthrough: "false"
        nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
        nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
      # -- EDC endpoints exposed by this ingress resource
      endpoints:
        - public
      # -- Defines the [ingress class](https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class)  to use
      className: "nginx"
      # -- Enables TLS on the ingress resource
      tls:
        - hosts:
            - "irs-consumer-dataplane-pen.int.demo.catena-x.net"
          # Default secret for certificate creation already provided to your namespace
          secretName: tls-secret
      ## Adds [cert-manager](https://cert-manager.io/docs/) annotations to the ingress resource
      certManager:
        # -- If preset enables certificate generation via cert-manager namespace scoped issuer
        issuer: ""
        # -- If preset enables certificate generation via cert-manager cluster-wide issuer
        clusterIssuer: ""

  configuration:
    # -- EDC configuration.properties configuring aspects of the [eclipse-dataspaceconnector](https://github.com/eclipse-dataspaceconnector/DataSpaceConnector)
    properties: |-
      edc.api.auth.key=123456

      edc.dataplane.token.validation.endpoint=http://edc-consumer-controlplane-pen:8182/validation/token

      edc.receiver.http.endpoint=http://aaswrapper-pen:9192/callback

      edc.oauth.client.id=D9:3A:80:9E:9C:21:95:12:5C:C2:1D:D8:30:80:7A:B9:DD:5F:C9:09:keyid:D9:3A:80:9E:9C:21:95:12:5C:C2:1D:D8:30:80:7A:B9:DD:5F:C9:09
      edc.oauth.private.key.alias=irs-int-daps-key
      edc.oauth.provider.audience=idsc:IDS_CONNECTORS_ALL
      edc.oauth.provider.jwks.url=https://daps1.int.demo.catena-x.net/.well-known/jwks.json
      edc.oauth.public.key.alias=irs-int-daps-cert
      edc.oauth.token.url=https://daps1.int.demo.catena-x.net/token

      edc.vault.hashicorp.url=https://vault.demo.catena-x.net
      edc.vault.hashicorp.token=<path:traceability-irs/data/int/controlplane#vaultToken>
      edc.vault.hashicorp.timeout.seconds=30
      edc.vault.hashicorp.health.check.enabled=true
      edc.vault.hashicorp.health.check.standby.ok=true
      edc.vault.hashicorp.api.secret.path=/v1/traceability-irs


# Values for edc postgres subchart.
postgresql:
  auth:
    postgresPassword: <path:traceability-irs/data/int/controlplane#databasepassword>
    username: <path:traceability-irs/data/int/controlplane#databaseuser>
    password: <path:traceability-irs/data/int/controlplane#databasepassword>
    database: "edc"
