# Default values for irs.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/catenax-ng/irs-api
  pullPolicy: Always

imagePullSecrets: [ ]

podAnnotations: { }

# -- The [pod security context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod) defines privilege and access control settings for a Pod within the deployment
podSecurityContext:
  seccompProfile:
    type: RuntimeDefault

# Following Catena-X Helm Best Practices @url: https://catenax-ng.github.io/docs/kubernetes-basics/helm
# @url: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
securityContext:
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  runAsNonRoot: true
  runAsUser: 10000
  runAsGroup: 3000

service:
  type: ClusterIP
  port: 8080
  actuatorPort: 4004

autoscaling:
  enabled: false

ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-passthrough: "false"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  hosts: [ ]
  tls: [ ]

# Following Catena-X Helm Best Practices @url: https://catenax-ng.github.io/docs/kubernetes-basics/helm
# @url: https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-resource-requests-and-limits
resources:
  limits:
    cpu: 0.75
    memory: 1.5Gi
  requests:
    cpu: 250m
    memory: 512Mi

nodeSelector: { }

tolerations: [ ]

# Following Catena-X Helm Best Practices @url: https://catenax-ng.github.io/docs/kubernetes-basics/helm
# @url: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: DoesNotExist
          topologyKey: kubernetes.io/hostname

# Following Catena-X Helm Best Practices @url: https://catenax-ng.github.io/docs/kubernetes-basics/helm
# @url: https://github.com/helm/charts/blob/master/stable/nginx-ingress/values.yaml#L210
livenessProbe:
  failureThreshold: 6
  initialDelaySeconds: 30
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1
readinessProbe:
  failureThreshold: 3
  initialDelaySeconds: 30
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1

######################
# Application config #
######################
global:
  enablePrometheus: false
  enableGrafana: false
#####################
# IRS Configuration #
#####################
irsUrl:

digitalTwinRegistry:
  url:
semanticsHub:
  url:
  defaultUrns: >
    urn:bamm:io.catenax.serial_part_typization:1.0.0#SerialPartTypization
#    ,urn:bamm:com.catenax.assembly_part_relationship:1.0.0#AssemblyPartRelationship
bpdm:
  url:
minioUser:
minioPassword:
keycloak:
  oauth2:
    clientId:
    clientSecret:
    clientTokenUri:
    jwkSetUri:
edc:
  controlplane:
    endpoint:
      data:
    request:
      ttl: PT10M
    provider:
      suffix: /api/v1/ids/data
    catalog:
      limit: 1000
    apikey:
      header:
      secret: test
  submodel:
    request:
      ttl: PT10M
    path: /submodel
    urnprefix: /urn


#######################
# Minio Configuration #
#######################
irs-minio:
  minioUser:
  minioPassword:

#########################
# Grafana Configuration #
#########################
irs-grafana:
  ingress: {}
  username:
  password:

##############################
# EDC Postgres Configuration #
##############################
postgresql:
  auth:
    username: edc
    database: edc
    postgresPassword:
    password:

##################################
# EDC Controlplane Configuration #
##################################
edc-controlplane:
  ingresses: []
  edc:
    postgresql:
      user: edc
      password:
    transfer:
      proxy:
        token:
          verifier:
            publickey:
              alias:
          signer:
            privatekey:
              alias:
    api:
      auth:
        key:
    controlplane:
      url:
    dataplane:
      url:
  configuration:
    properties: |-
      edc.oauth.client.id=
      edc.oauth.private.key.alias=
      edc.oauth.provider.jwks.url=
      edc.oauth.public.key.alias=
      edc.oauth.token.url=
      edc.vault.hashicorp.url=
      edc.vault.hashicorp.token=
      edc.vault.hashicorp.api.secret.path=
      edc.data.encryption.keys.alias=
      edc.data.encryption.algorithm=NONE

###############################
# EDC Dataplane Configuration #
###############################
edc-dataplane:
  edc:
    api:
      auth:
        key:
  ## Ingress declaration to expose the network service.
  ingresses: []

  configuration:
    properties: |-
      edc.oauth.client.id=
      edc.oauth.private.key.alias=
      edc.oauth.provider.audience=idsc:IDS_CONNECTORS_ALL
      edc.oauth.provider.jwks.url=
      edc.oauth.public.key.alias=
      edc.oauth.token.url=
      edc.vault.hashicorp.url=
      edc.vault.hashicorp.token=
      edc.vault.hashicorp.api.secret.path=