---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  namespace: {{ .Release.Namespace | default "default" | quote }}
  labels:
    {{- include "irs.labels" . | nindent 4 }}
  annotations:
    checkov.io/skip1: CKV_K8S_35=Secrets are handled by vault and need to be passed as environment variables
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      {{- include "irs.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- with .Values.podAnnotations }}
          annotations:
            {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{ include "irs.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "irs.serviceAccountName" . }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.name }}
                  key: minioUser
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.name }}
                  key: minioPassword
            - name: KEYCLOAK_OAUTH2_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.name }}
                  key: keycloakClientId
            - name: KEYCLOAK_OAUTH2_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.name }}
                  key: keycloakClientSecret
            - name: EDC_API_KEY_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.name }}
                  key: edcApiSecret
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: httptrusted
              containerPort: 8181
              protocol: TCP
            - name: actuator
              containerPort: 4004
              protocol: TCP
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: "/actuator/health/liveness"
              port: actuator
              scheme: HTTP
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: "/actuator/health/readiness"
              port: actuator
              scheme: HTTP
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: application-config
              mountPath: /app/config
      volumes:
        - name: tmp
          emptyDir: {}
        - name: application-config
          configMap:
            name: {{ .Chart.Name }}
            items:
              - key: application.yaml
                path: application.yaml